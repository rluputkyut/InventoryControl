@page "/Brand/index"
@using InventoryControl.Client.Components
@using InventoryControl.Shared
@using InventoryControl.Shared.RequestFeatures
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Brand Listing</h3>


@if (brands == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>
        <button class="btn btn-primary" @onclick="OnAddNew">Create New Brand</button>
    </p>

    <div class="row col-12">
        
        <table class="table">
            <thead>
                <tr>
                    <th>Code</th>
                    <th>Name</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var info in brands)
                {
                    <tr>
                        <td>@info.Code</td>
                        <td>@info.Name</td>
                        <td>
                            <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => OnEdit(info.Id))">Edit</a> |
                            <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => OnDelete(info))">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="row">
        <div class="col">
            <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
        </div>
    </div>
    @*@if (Show)
        {
            <div class="modal" tabindex="-1" role="dialog" style="display: @(Show ? "block" : "none")">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Confirm Dialog</h5>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure to delete? </p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" @onclick="@(()=> OnDelete())">Ok</button>
                            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@(()=> this.Show=false)">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        }*@

}

@code {
    public MetaData MetaData { get; set; } = new MetaData();
    private PageParameters _pageParameters = new PageParameters();
    private List<BrandInfo> brands;
    public bool Show { get; set; } = false;
    int _tempId = 0;

    void OnAddNew()
    {
        NavigationManager.NavigateTo("/Brand/Add");
    }

    void OnEdit(int id)
    {
        NavigationManager.NavigateTo($"/Brand/Edit/{id}");
    }

    //void OnShowDialog(int id)
    //{
    //    Show = true;
    //    _tempId = id;
    //}

    async void OnDelete(BrandInfo info)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure to delete the brand '{info.Name}'?"))
            return;

        Show = false;
        var result = await Http.DeleteAsync("api/brand/delete/" + info.Id);

        if (result.IsSuccessStatusCode)
            await LoadForm();
    }

    private async Task LoadForm()
    {
        await Task.Delay(500);

        await GetData(_pageParameters);

        StateHasChanged();
    }

    private async Task SelectedPage(int page)
    {
        _pageParameters.PageNumber = page;
        await GetData(_pageParameters);
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    await GetData(_pageParameters);
    //}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRenderAsync - firstRender = " + firstRender);

        if (firstRender)
        {
            await LoadForm();

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }


    async Task GetData(PageParameters parameters)
    {
        var response = await Http.GetFromJsonAsync<BrandList>($"api/brand/getbypage?PageNumber={parameters.PageNumber}&PageSize={parameters.PageSize}");

        brands = response.Items;
        MetaData = response.Meta;
    }
}
