@page "/Customer/index"
@using InventoryControl.Shared
@using InventoryControl.Client.Components
@using InventoryControl.Shared.RequestFeatures
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Customer Listing</h3>


@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>
        <button class="btn btn-primary" @onclick="OnAddNew">Create New Customer</button>
    </p>

    <table class="table col-lg-10 col-md-10 col-sm-10">
        <thead>
            <tr>
                <th>Code <input class="form-control" placeholder="search" @oninput="@(e => OnSearchTextChanged(e, "code"))" /></th>
                <th>Name <input class="form-control" placeholder="search" @oninput="@(e => OnSearchTextChanged(e, "name"))" /></th>
                <th>Nick Name <input class="form-control" placeholder="search" @oninput="@(e => OnSearchTextChanged(e, "nickName"))" /></th>
                <th>Phone No<input class="form-control" placeholder="search" @oninput="@(e => OnSearchTextChanged(e, "phoneNo"))" /></th>
                <th>Address<input class="form-control" placeholder="search" @oninput="@(e => OnSearchTextChanged(e, "address"))" /></th>
                <th>Account Information<input class="form-control" placeholder="search" @oninput="@(e => OnSearchTextChanged(e, "account"))" /></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var info in customers)
            {
                <tr>
                    <td>@info.Code</td>
                    <td>@info.Name</td>
                    <td>@info.NickName</td>
                    <td>@info.PhoneNo</td>
                    <td>@info.Address</td>
                    <td>@info.AccountInformation</td>
                    <td>
                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => OnEdit(info.Id))">Edit</a> |
                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => OnDelete(info))">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="row">
        <div class="col">
            <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
        </div>
    </div>
}

@code {
    public MetaData MetaData { get; set; } = new MetaData();
    private PageParameters _pageParameters = new PageParameters();
    private List<CustomerInfo> customers;
    public bool Show { get; set; } = false;
    int _tempId = 0;
    string _code, _name, _nickName, _phoneNo, _address, _account;

    void OnAddNew()
    {
        NavigationManager.NavigateTo("/Customer/Add");
    }

    void OnEdit(int id)
    {
        NavigationManager.NavigateTo($"/Customer/Edit/{id}");
    }

    private async Task SelectedPage(int page)
    {
        _pageParameters.PageNumber = page;
        await GetData(_pageParameters);
    }

    async void OnDelete(CustomerInfo info)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure to delete the customer '{info.Name}'?"))
            return;

        Show = false;
        var result = await Http.DeleteAsync("api/customer/delete/" + info.Id);

        if (result.IsSuccessStatusCode)
            await LoadForm();
    }

    private async Task LoadForm()
    {
        await Task.Delay(500);

        await GetData(_pageParameters);

        StateHasChanged();
    }

    async void OnSearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        switch (columnTitle)
        {
            case "code":
                _code = changeEventArgs.Value.ToString();
                break;
            case "name":
                _name = changeEventArgs.Value.ToString();
                break;
            case "nickName":
                _nickName = changeEventArgs.Value.ToString();
                break;
            case "phoneNo":
                _phoneNo = changeEventArgs.Value.ToString();
                break;
            case "address":
                _address = changeEventArgs.Value.ToString();
                break;
            case "account":
                _account = changeEventArgs.Value.ToString();
                break;
        }

        await GetData(_pageParameters);

        StateHasChanged();
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    products = await Http.GetFromJsonAsync<List<ProductInfo>>("api/product/get");
    //}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRenderAsync - firstRender = " + firstRender);

        if (firstRender)
        {
            await LoadForm();

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    async Task GetData(PageParameters parameters)
    {
        _code = string.IsNullOrEmpty(_code) ? string.Empty : _code;
        _name = string.IsNullOrEmpty(_name) ? string.Empty : _name;
        _nickName = string.IsNullOrEmpty(_nickName) ? string.Empty : _nickName;
        _phoneNo = string.IsNullOrEmpty(_phoneNo) ? string.Empty : _phoneNo;
        _address = string.IsNullOrEmpty(_address) ? string.Empty : _address;
        _account = string.IsNullOrEmpty(_account) ? string.Empty : _account;

        var response = await Http.GetFromJsonAsync<CustomerList>($"api/customer/getbypage?PageNumber={parameters.PageNumber}&PageSize={parameters.PageSize}&Code={_code}&Name={_name}&NickName={_nickName}&PhoneNo={_phoneNo}&Address={_address}&Account={_account}");

        customers = response.Items;
        MetaData = response.Meta;
    }

}
