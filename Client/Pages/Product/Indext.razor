@page "/Product/index"
@using InventoryControl.Shared
@using InventoryControl.Client.Components
@using InventoryControl.Shared.RequestFeatures
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Product Listing</h3>


@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>
        <button class="btn btn-primary" @onclick="OnAddNew">New Product</button>
    </p>
    <div class="row col-12">
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th>Code <input class="form-control" placeholder="search" @oninput="@(e => OnSearchTextChanged(e, "code"))" /></th>
                    <th>Name <input class="form-control" placeholder="search" @oninput="@(e => OnSearchTextChanged(e, "name"))" /></th>
                    <th>BrandName <input class="form-control" placeholder="search" @oninput="@(e => OnSearchTextChanged(e, "brand"))" /></th>
                    <th>ProductTypeName <input class="form-control" placeholder="search" @oninput="@(e => OnSearchTextChanged(e, "productType"))" /></th>
                    <th>Price</th>
                    <th>ExpiredDate</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var info in products)
                {
                    <tr>
                        @if (string.IsNullOrEmpty(info.Photo))
                        {
                            <td></td>
                        }
                        else
                        {
                            <td><img class="rounded m-0 h-50" src="@string.Format($"data:png;base64,{info.Photo}")" /></td>
                        }
                        <td>@info.Code</td>
                        <td>@info.Name</td>
                        <td>@info.BrandName</td>
                        <td>@info.ProductTypeName</td>
                        <td>@String.Format("{0:0.00} MMK", info.Price)</td>
                        <td>@info.ExpiredDate</td>
                        <td>
                            <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => OnEdit(info.Id))">Edit</a> |
                            <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => OnDelete(info))">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="row">
        <div class="col">
            <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
        </div>
    </div>
}

@code {
    public MetaData MetaData { get; set; } = new MetaData();
    private PageParameters _pageParameters = new PageParameters() { PageSize = 4};
    private List<ProductInfo> products;
    public bool Show { get; set; } = false;
    int _tempId = 0;
    string _code, _name, _brand, _productType;

    void OnAddNew()
    {
        NavigationManager.NavigateTo("/Product/Add");
    }

    void OnEdit(int id)
    {
        NavigationManager.NavigateTo($"/Product/Edit/{id}");
    }

    async void OnDelete(ProductInfo info)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure to delete the product '{info.Name}'?"))
            return;

        Show = false;
        var result = await Http.DeleteAsync("api/product/delete/" + info.Id);

        if (result.IsSuccessStatusCode)
            await LoadForm();
    }

    private async Task SelectedPage(int page)
    {
        _pageParameters.PageNumber = page;
        await GetData(_pageParameters);
    }

    private async Task LoadForm()
    {
        await Task.Delay(500);

        await GetData(_pageParameters);

        StateHasChanged();
    }

    async void OnSearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        switch (columnTitle)
        {
            case "code":
                _code = changeEventArgs.Value.ToString();
                break;
            case "name":
                _name = changeEventArgs.Value.ToString();
                break;
            case "brand":
                _brand = changeEventArgs.Value.ToString();
                break;
            case "productType":
                _productType = changeEventArgs.Value.ToString();
                break;
        }

        await GetData(_pageParameters);

        StateHasChanged();
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    products = await Http.GetFromJsonAsync<List<ProductInfo>>("api/product/get");
    //}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRenderAsync - firstRender = " + firstRender);

        if (firstRender)
        {
            await LoadForm();

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    async Task GetData(PageParameters parameters)
    {
        _code = string.IsNullOrEmpty(_code) ? string.Empty : _code;
        _name = string.IsNullOrEmpty(_name) ? string.Empty : _name;
        _brand = string.IsNullOrEmpty(_brand) ? string.Empty : _brand;
        _productType = string.IsNullOrEmpty(_productType) ? string.Empty : _productType;

        var response = await Http.GetFromJsonAsync<ProductList>($"api/product/getbypage?PageNumber={_pageParameters.PageNumber}&PageSize={_pageParameters.PageSize}&Code={_code}&Name={_name}&Brand={_brand}&ProductType={_productType}");

        products = response.Items;
        MetaData = response.Meta;
    }

}
