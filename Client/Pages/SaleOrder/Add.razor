@page "/SaleOrder/Add"
@using InventoryControl.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Sale Order Entry</h3>

@if (headerInfo == null || headerInfo.Items == null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm Model="headerInfo" OnValidSubmit="Create" class="card card-body bg-light mt-2">
    <DataAnnotationsValidator />

    <div class="col-12 row mt-2">
        <label for="Code" class="col-md-2 col-form-label">Code:</label>
        <div>
            <InputText id="Code" class="form-control" @bind-Value="headerInfo.Code" />
            <ValidationMessage For="@(()=> headerInfo.Code)" />
        </div>
    </div>
    <div class="col-12 row mt-2">
        <label for="WarehouseId" class="col-md-2 col-form-label">Warehouse:</label>
        <div>
            <Select id="WarehouseId" class="form-control" @onchange="WarehouseSelectionChanged">
                @if (warehouses != null)
                {
                        <option value="0">Select</option>
                    @foreach (var warehouse in warehouses)
                    {
                        var _selected = warehouse.Id == headerInfo.WarehouseId;
                        <option value="@warehouse.Id" selected="@_selected">@warehouse.Name</option>
                    }
                }
            </Select>
            <ValidationMessage For="@(()=> headerInfo.WarehouseId)" />
        </div>
    </div>
    <div class="col-12 row mt-2">
        <label for="CustomerId" class="col-md-2 col-form-label">Customer:</label>
        <div>
            <InputSelect id="CustomerId" class="form-control" @bind-Value="headerInfo.CustomerId">
                @if (customers != null)
                    {
                        <option value="0">Select</option>
                    @foreach (var info in customers)
                        {
                        <option value="@info.Id">@info.Name</option>
                        }
                    }
            </InputSelect>
            <ValidationMessage For="@(()=> headerInfo.CustomerId)" />
        </div>
    </div>
    <div class="col-12 row mt-2">
        <label for="Payment" class="col-md-2 col-form-label">Payment Type:</label>
        <div>
            <label>Cash On Delivery <input type="radio" name="payType" id="COD" value="COD" @onchange="RadioSelection" checked=@headerInfo.IsCOD /></label>
            <label>Account Transfer <input type="radio" name="payType" id="Account" value="Account" @onchange="RadioSelection" checked=@headerInfo.IsAccountTransfer /></label>            
        </div>
    </div>
    @if (headerInfo.IsAccountTransfer)
    { 
    <div class="col-12 row mt-2">
        <label for="TransferInfo" class="col-md-2 col-form-label">Account Information:</label>
        <div>
            <InputTextArea id="TransferInfo" class="form-control" @bind-Value="headerInfo.TransferInfo" />
            <ValidationMessage For="@(()=> headerInfo.TransferInfo)" />
        </div>
    </div>
    }
    <div class="col-12 row mt-2">
        <label for="Remark" class="col-md-2 col-form-label">Remark:</label>
        <div>
            <InputTextArea id="Remark" class="form-control" @bind-Value="headerInfo.Remark" />
            <ValidationMessage For="@(()=> headerInfo.Remark)" />
        </div>
    </div>
    <br />
    <div class="row col-md-12 mt-2">
        <div class="col-md-2">
            <label>Product:</label>
            <InputSelect id="ProductId" class="form-control" @bind-Value="itemInfo.ProductId">
                @if (products != null)
                    {
                        <option value ="0" >Select</option>
                    @foreach (var product in products)
                        {
                        <option value="@product.ProductId">@product.ProductName</option>
                        }
                    }
            </InputSelect>
        </div>
        <div class="col-md-2">
            <label>Quantity:</label>
            <InputNumber id="Quantity" class="form-control" @bind-Value="itemInfo.Quantity" />
        </div>
        <div class="col-md-2">
            <label>Buying Price:</label>
            <InputNumber id="BuyingPrice" class="form-control" @bind-Value="itemInfo.SellingPrice" />
        </div>
        <div class="col-md-2">
            <label>Other Expense:</label>
            <InputNumber id="OtherExpense" class="form-control" @bind-Value="itemInfo.OtherExpense" />
        </div>
        <div class="col-md-8 text-right mt-2">
            <label> </label>
            <button type="button" class="btn btn-primary" @onclick="@AddItem">Add</button>
            <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancel</button>
        </div>
    </div>
    <br />
    <div class="col-md-12 mt-2">
        <table class="table">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Buying Price</th>
                    <th>Other Expense</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var info in headerInfo.Items)
                {
                    <tr>
                        <td>@info.ProductName</td>
                        <td>@info.Quantity</td>
                        <td>@String.Format("{0:0.00}", info.SellingPrice)</td>
                        <td>@String.Format("{0:0.00}", info.OtherExpense)</td>
                        <td>
                            <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => OnEditItem(info.Id))">Edit</a> |
                            <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => OnDeleteItem(info.Id))">Delete</a> |
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <ValidationMessage For="@(()=> headerInfo.Items)" />
    </div>

    <div class="row mt-2">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="@Back">Cancel</button>
        </div>
    </div>
</EditForm>
}

@code {

    [Parameter]
    public int id { get; set; }
    bool isItemEdit;

    private SaleOrderHeaderInfo headerInfo;
    private SaleOrderItemInfo itemInfo;

    private List<WarehouseInfo> warehouses;
    private List<CustomerInfo> customers;
    private List<WarehouseProductInfo> products;

    protected override async Task OnInitializedAsync()
    {
        headerInfo = new SaleOrderHeaderInfo();
        itemInfo = new SaleOrderItemInfo();

        customers = await Http.GetFromJsonAsync<List<CustomerInfo>>($"api/customer/get");
        //products = await Http.GetFromJsonAsync<List<ProductInfo>>($"api/product/get");
        warehouses = await Http.GetFromJsonAsync<List<WarehouseInfo>>($"api/warehouse/get");

        headerInfo.Items = new List<SaleOrderItemInfo>();
    }

    void RadioSelection(ChangeEventArgs e)
    {
        if (e.Value.Equals("COD"))
        {
            headerInfo.IsCOD = true;
            headerInfo.IsAccountTransfer = false;
        }
        else
        {
            headerInfo.IsCOD = false;
            headerInfo.IsAccountTransfer = true;
        }
    }

    async void WarehouseSelectionChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            var _newId = Convert.ToInt32(e.Value.ToString());
            headerInfo.WarehouseId = _newId;
            itemInfo = new SaleOrderItemInfo();
            headerInfo.Items = new List<SaleOrderItemInfo>();
            products = await Http.GetFromJsonAsync<List<WarehouseProductInfo>>($"api/warehouseproducts/getbywarehouseid/{_newId}");
            StateHasChanged();
        }
    }

    private async Task Create()
    {
        await Http.PostAsJsonAsync<SaleOrderHeaderInfo>("api/saleorder/save", headerInfo);

        NavigationManager.NavigateTo("/SaleOrder/Index");
    }


    void Back()
    {
        NavigationManager.NavigateTo("/SaleOrder/Index");
    }

    async void AddItem()
    {
        if (itemInfo.ProductId == 0 || itemInfo.Quantity <= 0 || itemInfo.SellingPrice < 0 || itemInfo.OtherExpense < 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Invalid Data!");
            return;
        }
        else if (products.Where(x => x.ProductId == itemInfo.ProductId && x.Quantity < itemInfo.Quantity).Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Quantity is not enough!");
            return;
        }
        else if (!isItemEdit && headerInfo.Items.Where(x => x.ProductId == itemInfo.ProductId).Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Duplicate Product!");
            return;
        }

        if (isItemEdit)
        {
            var item = headerInfo.Items.Where(x => x.Id == itemInfo.Id).First();
            item.ProductId = itemInfo.ProductId;
            item.ProductName = products.Where(x => x.ProductId == itemInfo.ProductId).Select(x => x.ProductName).FirstOrDefault();
            item.Quantity = itemInfo.Quantity;
            item.SellingPrice = itemInfo.SellingPrice;
            item.OtherExpense = itemInfo.OtherExpense;
        }
        else
        {
            itemInfo.Id = GenerateId();
            itemInfo.HeaderId = id;
            itemInfo.ProductName = products.Where(x => x.ProductId == itemInfo.ProductId).Select(x => x.ProductName).FirstOrDefault();
            headerInfo.Items.Add(itemInfo);
        }

        itemInfo = new SaleOrderItemInfo();
        isItemEdit = false;
    }

    void Cancel()
    {
        itemInfo = new SaleOrderItemInfo();
        isItemEdit = false;
    }

    void OnEditItem(int id)
    {
        var item = headerInfo.Items.Where(x => x.Id == id).FirstOrDefault();
        itemInfo.Id = item.Id;
        itemInfo.HeaderId = item.HeaderId;
        itemInfo.ProductId = item.ProductId;
        itemInfo.ProductName = item.ProductName;
        itemInfo.Quantity = item.Quantity;
        itemInfo.SellingPrice = item.SellingPrice;
        itemInfo.OtherExpense = item.OtherExpense;

        isItemEdit = true;
    }

    void OnDeleteItem(int id)
    {
        var _item = headerInfo.Items.Where(x => x.Id == id).FirstOrDefault();
        headerInfo.Items.Remove(_item);
    }

    int GenerateId()
    {
        int _id;
        if (headerInfo.Items.Count == 0)
        {
            _id = 1;
        }
        else
        {
            _id = headerInfo.Items.OrderByDescending(x => x.Id).Select(x => x.Id).First();
            _id++;
        }
        return _id;
    }

}
